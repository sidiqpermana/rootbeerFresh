apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

rootProject.ext.set("packageName", 'rootbeerFresh.library')
rootProject.ext.set("libVersionName", '1.0.1')

buildscript {
    repositories {
        google()
        maven {
            url 'https://jitpack.io'
        }
        jcenter()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

group = rootProject.ext.packageName
version = rootProject.ext.libVersionName

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode 1
        versionName rootProject.ext.libVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // Perform a check to see if the NDK exists
    if (android.getNdkDirectory() != null && android.getNdkDirectory().exists()) {
        // If it does, perform compilation
        logger.debug("Found NDK" + android.getNdkDirectory())

        externalNativeBuild {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }

    } else {
        //Otherwise disable automatic ndk-build and use pre-compiled .so files
        logger.debug("NDK Not Present" + android.getNdkDirectory())

        sourceSets {
            main {
                jni.srcDirs = []
            }
        }
    }

    packagingOptions {
        // In case there are both compiled .so files and provided .so files, pick the first (should be generated)
        pickFirst('lib/*/libtool-checker.so')
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.10.0'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release
                // You can then customize attributes of the publication as shown below.
                groupId = 'com.kimchangyoun.rootbeerFresh'
                artifactId = 'librootbeerfresh'
                version = '1.0.1'
            }
        }
    }
}

apply from: 'https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle'

